
pipeline {
    agent any

    stages {
        stage('set parameter')
        {
            steps {
                script {
                    //       properties([parameters([choice(choices: ['master'], description: 'select branch', name: 'branch')])])
                    properties([parameters([booleanParam(defaultValue: true, description: 'select boolean value', name: 'Bookean'), string(defaultValue: 'script run', description: 'string', name: 'String parameter', trim: true), choice(choices: ['master', 'dev'. 'test'], description: 'select branch', name: 'branch')])])
                }
            }
        }
    

        stage('get SCM')
        {
            steps {
            //    git url: 'https://github.com/kiranbdevops/webapp_tomcat.git', branch: '${params.branch}'
                git branch: "${params.branch}", url: 'https://github.com/kiranbdevops/webapp_tomcat.git'
            }
        }
    }
}


=====================

pipeline {
    agent any

    stages {
        stage('set parameter')
        {
            input {
  message 'Required Approval'
  id 'test'
  ok 'OK'
  submitter 'admin'
            }
  
            steps {
                script {
                    //       properties([parameters([choice(choices: ['master'], description: 'select branch', name: 'branch')])])
                    properties([parameters([choice(choices: ['1', '2', '3', '4'], description: 'Select Choice', name: 'choice'), choice(choices: ['master', 'QA', 'dev'], description: 'Select Branch', name: 'Branch')])])
                }
            }
        }

        stage('get SCM')
        {
         when{
            expression { choice == '1'}
         }
         environment{
             localvar = "Hello world"
         }
            steps {
                //    git url: 'https://github.com/kiranbdevops/webapp_tomcat.git', branch: '${params.branch}'
                git branch: "${params.Branch}", url: 'https://github.com/kiranbdevops/webapp_tomcat.git'
                echo " welcome to ${localvar}"
            }
        }
    }
}

=============================================


pipeline{
    agent any
       
stages{
    stage('initial'){
        steps{
            script{
           properties([parameters([[$class: 'ChoiceParameter', choiceType: 'PT_RADIO', filterLength: 1, filterable: false, name: 'env', randomName: 'choice-parameter-5695275913713', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return[\'select proepr env\']'], script: [classpath: [], oldScript: '', sandbox: false, script: '''return[
\'production\',
\'QA\',
\'Development\'
]''']]], [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false, name: 'sub_env', randomName: 'choice-parameter-5695278327258', referencedParameters: 'env', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return["select proper sub_env"]'], script: [classpath: [], oldScript: '', sandbox: false, script: '''if (env.equals("production")){
return ["PROD1"]
}
else if (env.equals("QA")){
return["QA1","QA2"]
}
else if (env.equals("Development")){
return["Dev1","Dev2"]
}
else{
retuen["select  a server from drop down"]
}''']]], [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: true, name: 'instances', randomName: 'choice-parameter-5695290671606', referencedParameters: 'sub_env', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return["select instance"]'], script: [classpath: [], oldScript: '', sandbox: false, script: '''if(sub_env.equals("Dev1")){
return ["sd-type-01", "sd-typr-02","sd-typr-03"]
}
else if(sub_env.equals("Dev2")){
return ["sd-dev2-01", "sd-dev2-02","sd-dev2-03"]
}
else if(sub_env.equals("PROD1")){
return ["sd-prod-01", "sd-prod-02","sd-prod-03"]
}
else if(sub_env.equals("QA1")){
return["No services found"]
}
else if(sub_env.equals("QA2")){
return["sd-qa-01", "sd-qa-02"]
}
else {
return["select any instance"]
}''']]]])])
            echo "Hello world"
            echo "Environemnt - ${params.env}"
            echo "server - ${params.sub_env}"
            echo "instance - ${params.instances}"
            }
        }
    }

stage{
    steps{
        when{
            expression { QA == "${params.env}"
        }
        echo "This is QA environemnt"
    }
}
}
}
}
======================


pipeline{
    agent any
       
stages{
    stage('initial'){
        steps{
            script{
           properties([parameters([[$class: 'ChoiceParameter', choiceType: 'PT_RADIO', filterLength: 1, filterable: false, name: 'env', randomName: 'choice-parameter-5695275913713', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return[\'select proepr env\']'], script: [classpath: [], oldScript: '', sandbox: false, script: '''return[
\'production\',
\'QA\',
\'Development\'
]''']]], [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false, name: 'sub_env', randomName: 'choice-parameter-5695278327258', referencedParameters: 'env', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return["select proper sub_env"]'], script: [classpath: [], oldScript: '', sandbox: false, script: '''if (env.equals("production")){
return ["PROD1"]
}
else if (env.equals("QA")){
return["QA1","QA2"]
}
else if (env.equals("Development")){
return["Dev1","Dev2"]
}
else{
retuen["select  a server from drop down"]
}''']]], [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: true, name: 'instances', randomName: 'choice-parameter-5695290671606', referencedParameters: 'sub_env', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: 'return["select instance"]'], script: [classpath: [], oldScript: '', sandbox: false, script: '''if(sub_env.equals("Dev1")){
return ["sd-type-01", "sd-typr-02","sd-typr-03"]
}
else if(sub_env.equals("Dev2")){
return ["sd-dev2-01", "sd-dev2-02","sd-dev2-03"]
}
else if(sub_env.equals("PROD1")){
return ["sd-prod-01", "sd-prod-02","sd-prod-03"]
}
else if(sub_env.equals("QA1")){
return["No services found"]
}
else if(sub_env.equals("QA2")){
return["sd-qa-01", "sd-qa-02"]
}
else {
return["select any instance"]
}''']]]])])
            echo "Hello world"
            echo "Environemnt - ${params.env}"
            echo "server - ${params.sub_env}"
            echo "instance - ${params.instances}"
            }
        }
    }

stage('QA Stage'){
            when{
            expression { "${params.env}" == 'QA'}
            }
    steps{
        echo "This is QA environemnt"
    }
}
}
}

==========================================

pipeline{
    agent any
    stages{
        stage('setting parameters'){
        steps{
            script{
        properties([parameters([[$class: 'ChoiceParameter', choiceType: 'PT_RADIO', filterLength: 1, filterable: false, name: 'env', randomName: 'choice-parameter-4046353678759', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''return[
"DEV",
"QA",
"PROD"
]''']]]])])
            }
        }
    }

        stage('getting code from SCM'){
        steps{
         git 'https://github.com/kiranbdevops/Maven.git'

        }
    }

        stage('cloning manual war file'){
        steps{
        git 'https://github.com/kiranbdevops/testwar.git'
        echo " valus is - ${params.env}" 
        }
    }

        stage('deploy to DEV server'){
                when{
                expression { "${params.env}" == 'DEV'  }
            }
        steps{
        deploy adapters: [tomcat9(credentialsId: 'tomcat_cred', path: '', url: 'http://3.129.90.8:8085/')], contextPath: 'testkiran', war: '**/*.war'

        }
    }


}
}
